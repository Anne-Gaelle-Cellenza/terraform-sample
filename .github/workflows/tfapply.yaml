name: Reusable workflow for Terraform plan-apply
on:
  workflow_call:
    inputs:
      environment:
        description: The environment where to run the action
        type: string
        required: true
    
jobs:

  TF_plan:
    runs-on: ubuntu-latest
    name: Terraform plan
    environment: ${{ inputs.environment }}
    outputs:
      tfPlanExitCode: ${{ steps.tf_plan.outputs.exitcode }}
    steps:

    - uses: actions/checkout@v4
    
    # Install Terraform CLI
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false # we wrap Terraform subsequent calls to retrieve plan exitcode
        
    - name: Terraform plan
      id: tf_plan
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/src/terraform
        terraform init -upgrade -backend-config='../../configuration/${{ inputs.environment }}/backend.hcl'
        exitcode=0
        terraform plan -detailed-exitcode -var-file='../../configuration/${{ inputs.environment }}/var.tfvars' -input=false -auto-approve || exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        if [ $exitcode -eq 1 ]; then
          echo "Error in TF plan - exit"
          exit 1
        fi
      env:
        TF_VAR_admin_account_password : ${{ secrets.admin_account_password }}
        ARM_CLIENT_ID: ${{ vars.SP_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.SP_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}

  TF_apply:
    runs-on: ubuntu-22.04
    name: Terraform apply
    environment: ${{ inputs.environment }}
    needs:
    - TF_plan
    # only run this step if the previous plan step returned 2 == changes exist in TF plan
    if: needs.TF_plan.outputs.tfPlanExitCode == 2
    steps:

    - uses: actions/checkout@v4

    # Install Terraform CLI
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform apply
      id: tf_apply
      shell: pwsh
      run: |
        cd $env:GITHUB_WORKSPACE/src/terraform
        terraform init -upgrade -backend-config='../../configuration/${{ inputs.environment }}/backend.hcl'
        terraform apply -var-file='../../configuration/${{ inputs.environment }}/var.tfvars' -input=false -auto-approve
      env:
        TF_VAR_admin_account_password : ${{ secrets.admin_account_password }}
        ARM_CLIENT_ID: ${{ vars.SP_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.SP_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ vars.TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
  
